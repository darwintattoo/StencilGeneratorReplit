Analysis

The repo already includes CLAHE-based exposure adjustment.
The client keeps a autoExposureCorrection state to enable/disable it:

const [autoExposureCorrection, setAutoExposureCorrection] = useState(true); // "Auto Exposure Correction"

A button over the image preview toggles this state:

<button
  type="button"
  onClick={() => setAutoExposureCorrection(!autoExposureCorrection)}
  className={`absolute top-2 left-2 px-3 py-1 rounded-full ...
`}
>
  {autoExposureCorrection ? '✓ Auto Exposure' : 'Auto Exposure'}
</button>

When submitting the image, the client includes this value in the form data:

if (params.autoExposureCorrection !== undefined) {
  formData.append("autoExposureCorrection", params.autoExposureCorrection.toString());
}

On the server, /api/upload-image reads the flag and applies CLAHE if enabled:

const autoExposureCorrection = req.body.autoExposureCorrection === 'true' || req.body.autoExposureCorrection === true ? true : false;

...

// Apply CLAHE processing if enabled
if (autoExposureCorrection) {
  const claheResult = await applyAutoExposureCorrection(req.file.path);
  ...
}

The actual CLAHE implementation resides in server/image-processing.ts:

/**
 * Apply Contrast Limited Adaptive Histogram Equalization (CLAHE)
 * Implements the exact algorithm as OpenCV: clip_limit=2.0, tile_grid_size=8x8, LAB color space
 */
export async function applyCLAHE(imagePath: string, clipLimit = 2.0, tileGridSize = 8): Promise<string> {
  ...
  // Process each tile with CLAHE
  for (let tileY = 0; tileY < tileGridSize; tileY++) {
    for (let tileX = 0; tileX < tileGridSize; tileX++) {
      ...
      processTileWithCLAHE(data, processedData, startX, startY, endX, endY, width, info.channels, clipLimit);
    }
  }
  ...
}

The function applyAutoExposureCorrection calls applyCLAHE and returns the processed metrics:

export async function applyAutoExposureCorrection(imagePath: string): Promise<{
  processedImagePath: string;
  originalMetrics: { brightness: number; contrast: number };
  processedMetrics: { brightness: number; contrast: number };
}> {
  ...
  const processedImagePath = await applyCLAHE(imagePath, 2.0, 8);
  ...
}

So the workflow is:

User toggles “Auto Exposure” in the UI.

The flag is sent via uploadImageForStencil.

Server checks the flag and, if true, processes the image with CLAHE before sending it to ComfyDeploy.

Potential Issues

Missing translation keys
The client refers to messages such as t("form.error") and t("form.error_file_type"), but only keys like "error" and "error_file_type" exist in the translation files. This causes untranslated labels to appear.

Unused/legacy files
server/routes.ts.fix and server/routes.ts.old appear to be outdated copies of the routing logic, which may confuse contributors.

No translations for the “Auto Exposure” toggle
The text "Auto Exposure" is hardcoded in StencilForm.tsx and is not included in the language provider’s translation tables.

Suggested Tasks

Tarea sugerida
Fix translation keys in StencilForm

Iniciar tarea
Tarea sugerida
Add translation entries for Auto Exposure toggle

Iniciar tarea
Tarea sugerida
Remove obsolete server route files

Iniciar tarea
Summary

The repo already implements CLAHE-based exposure correction. A toggle in StencilForm.tsx controls whether the client sends autoExposureCorrection to the server, which then processes the uploaded image using applyAutoExposureCorrection before forwarding it to ComfyDeploy.

Some translation keys are missing or inconsistent, and there are obsolete files that could be removed.