diff --git a/client/src/components/StencilEditor/Canvas.tsx b/client/src/components/StencilEditor/Canvas.tsx
index 9b1c7cd3ed69d13724c96ee835fa0d101ea47961..bcd7e83343710ee862862abc02c67fbdd4af0c98 100644
--- a/client/src/components/StencilEditor/Canvas.tsx
+++ b/client/src/components/StencilEditor/Canvas.tsx
@@ -1,94 +1,98 @@
 import React from 'react';
 import { Stage, Layer, Image as KonvaImage, Line, Rect } from 'react-konva';
 import { Slider } from '@/components/ui/slider';
 import type {
   DrawingLine,
   ViewTransform,
   LayersState,
   Tool,
   NativeSize,
   KonvaMouseEvent,
   KonvaTouchEvent,
   KonvaWheelEvent,
   StageRef,
-  LineRef
+  LineRef,
+  LayerRef,
+  StencilImage
 } from './types';
 
 interface CanvasProps {
   stageRef: React.RefObject<StageRef>;
   isLayersOpen: boolean;
   viewTransform: ViewTransform;
   handleMouseDown: (e: KonvaMouseEvent | KonvaTouchEvent) => void;
   handleMouseMove: (e: KonvaMouseEvent | KonvaTouchEvent) => void;
   handleMouseUp: () => void;
   handleWheel: (e: KonvaWheelEvent) => void;
   handleTouchStart: (e: KonvaTouchEvent) => void;
   handleTouchMove: (e: KonvaTouchEvent) => void;
   handleTouchEnd: (e: KonvaTouchEvent) => void;
   handleDoubleTap: () => void;
   layers: LayersState;
   originalImg: HTMLImageElement | null;
-  stencilImg: HTMLImageElement | null;
-  filteredStencilImg: HTMLImageElement | null;
+  stencilImg: StencilImage | null;
+  filteredStencilImg: StencilImage | null;
   drawingLines: DrawingLine[];
   stencilLines: DrawingLine[];
   currentLineRef: React.RefObject<DrawingLine | null>;
   drawingPointsRef: React.RefObject<number[]>;
   tempLineRef: React.RefObject<LineRef>;
+  stencilLayerRef: React.RefObject<LayerRef>;
   isErasingStencil: boolean;
   brushColor: string;
   tool: Tool;
   brushSize: number;
   setBrushSize: (size: number) => void;
   eraserSize: number;
   setEraserSize: (size: number) => void;
   nativeSize: NativeSize;
   canvasSize: NativeSize;
 }
 
 export default function Canvas({
   stageRef,
   isLayersOpen,
   viewTransform,
   handleMouseDown,
   handleMouseMove,
   handleMouseUp,
   handleWheel,
   handleTouchStart,
   handleTouchMove,
   handleTouchEnd,
   handleDoubleTap,
   layers,
   originalImg,
   stencilImg,
   filteredStencilImg,
   drawingLines,
   stencilLines,
   currentLineRef,
   drawingPointsRef,
   tempLineRef,
+  stencilLayerRef,
   isErasingStencil,
   brushColor,
   tool,
   brushSize,
   setBrushSize,
   eraserSize,
   setEraserSize,
   nativeSize,
   canvasSize
 }: CanvasProps) {
   return (
     <>
       <Stage
         width={canvasSize.width - (isLayersOpen ? 320 : 0)}
         height={canvasSize.height}
         onMouseDown={handleMouseDown}
         onMouseMove={handleMouseMove}
         onMouseUp={handleMouseUp}
         onWheel={handleWheel}
         onTouchStart={handleTouchStart}
         onTouchMove={handleTouchMove}
         onTouchEnd={handleTouchEnd}
         onDblTap={handleDoubleTap}
         ref={stageRef}
         scaleX={viewTransform.scale}
diff --git a/client/src/components/StencilEditor/Canvas.tsx b/client/src/components/StencilEditor/Canvas.tsx
index 9b1c7cd3ed69d13724c96ee835fa0d101ea47961..bcd7e83343710ee862862abc02c67fbdd4af0c98 100644
--- a/client/src/components/StencilEditor/Canvas.tsx
+++ b/client/src/components/StencilEditor/Canvas.tsx
@@ -101,109 +105,101 @@ export default function Canvas({
         {layers.background.visible && (
           <Layer opacity={layers.background.opacity / 100}>
             <Rect
               x={0}
               y={0}
               width={nativeSize.width}
               height={nativeSize.height}
               fill="white"
             />
           </Layer>
         )}
 
         {layers.original.visible && (
           <Layer opacity={layers.original.opacity / 100}>
             {originalImg && (
               <KonvaImage
                 image={originalImg}
                 width={nativeSize.width}
                 height={nativeSize.height}
               />
             )}
           </Layer>
         )}
 
         {layers.stencil.visible && (
-          <Layer opacity={layers.stencil.opacity / 100}>
+          <Layer opacity={layers.stencil.opacity / 100} ref={stencilLayerRef}>
             {filteredStencilImg ? (
               <KonvaImage
                 image={filteredStencilImg}
                 width={nativeSize.width}
                 height={nativeSize.height}
               />
             ) : stencilImg ? (
               <KonvaImage
                 image={stencilImg}
                 width={nativeSize.width}
                 height={nativeSize.height}
               />
             ) : null}
           </Layer>
         )}
 
         {layers.drawing.visible && (
           <Layer opacity={layers.drawing.opacity / 100}>
             {drawingLines.map((line, i) => (
               <Line
                 key={i}
                 points={line.points}
                 stroke={line.color}
                 strokeWidth={line.strokeWidth}
                 tension={0.5}
                 lineCap="round"
                 lineJoin="round"
                 globalCompositeOperation={line.globalCompositeOperation}
                 perfectDrawEnabled={true}
                 shadowForStrokeEnabled={false}
               />
             ))}
             {currentLineRef.current?.layer === 'drawing' && !isErasingStencil && (
               <Line
                 ref={tempLineRef}
                 points={drawingPointsRef.current || []}
                 stroke={currentLineRef.current?.color}
                 strokeWidth={currentLineRef.current?.strokeWidth}
                 tension={0.5}
                 lineCap="round"
                 lineJoin="round"
                 globalCompositeOperation={currentLineRef.current?.globalCompositeOperation}
                 perfectDrawEnabled={true}
                 shadowForStrokeEnabled={false}
               />
             )}
           </Layer>
         )}
-
         {layers.stencil.visible && (
           <Layer opacity={layers.stencil.opacity / 100}>
-            {stencilImg && (
-              <KonvaImage
-                image={stencilImg}
-                width={nativeSize.width}
-                height={nativeSize.height}
-              />
-            )}
             {stencilLines.map((line, i) => (
               <Line
                 key={`stencil-${i}`}
                 points={line.points}
                 stroke={line.color}
                 strokeWidth={line.strokeWidth}
                 tension={0.5}
                 lineCap="round"
                 lineJoin="round"
                 globalCompositeOperation={line.globalCompositeOperation}
                 perfectDrawEnabled={true}
                 shadowForStrokeEnabled={false}
               />
             ))}
             {currentLineRef.current?.layer === 'stencil' && !isErasingStencil && (
               <Line
                 ref={tempLineRef}
                 points={drawingPointsRef.current || []}
                 stroke={currentLineRef.current?.color}
                 strokeWidth={currentLineRef.current?.strokeWidth}
                 tension={0.5}
                 lineCap="round"
                 lineJoin="round"
                 globalCompositeOperation={currentLineRef.current?.globalCompositeOperation}
                 perfectDrawEnabled={true}
