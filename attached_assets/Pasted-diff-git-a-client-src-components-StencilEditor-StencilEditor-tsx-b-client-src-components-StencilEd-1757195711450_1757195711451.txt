diff --git a/client/src/components/StencilEditor/StencilEditor.tsx b/client/src/components/StencilEditor/StencilEditor.tsx
index 08d0002581831b066b3e4f58e4d43da6a7f7024b..8739fb73bfd3cf97e46bddcc520ddca5c474205e 100644
--- a/client/src/components/StencilEditor/StencilEditor.tsx
+++ b/client/src/components/StencilEditor/StencilEditor.tsx
@@ -16,50 +16,51 @@ import type {
   KonvaMouseEvent,
   KonvaTouchEvent,
   KonvaWheelEvent,
   StageRef,
   LineRef,
   PanGestureData,
   PinchGestureData,
   RotateGestureData
 } from './types';
 
 // Colores disponibles para el dibujo - solo negro, rojo y azul
 const DRAWING_COLORS = [
   '#000000', // Negro
   '#ef4444', // Rojo
   '#3b82f6', // Azul
 ];
 
 // Hook personalizado para manejar la lógica del canvas
 function useStencilCanvas() {
   const [tool, setTool] = useState<Tool>('brush');
   const [brushSize, setBrushSize] = useState<number>(4);
   const [eraserSize, setEraserSize] = useState<number>(10);
   const [activeLayer, setActiveLayer] = useState<ActiveLayer>('drawing');
   const [brushColor, setBrushColor] = useState<string>('#ef4444'); // Rojo por defecto
   const [stencilHue, setStencilHue] = useState<number>(0); // Control de tono para stencil
+  const [stencilSaturation, setStencilSaturation] = useState<number>(100); // Control de saturación para stencil
   const [layers, setLayers] = useState<LayersState>({
     drawing: { visible: true, opacity: 100 },
     stencil: { visible: true, opacity: 100 },
     original: { visible: true, opacity: 20 },
     background: { visible: true, opacity: 100 }
   });
   const [viewTransform, setViewTransform] = useState<ViewTransform>({
     x: 0,
     y: 0,
     scale: 1,
     rotation: 0
   });
 
   const toggleLayer = (key: string, visible: boolean) => {
     setLayers(prev => ({
       ...prev,
       [key]: { ...prev[key as keyof typeof prev], visible }
     }));
   };
 
   const setOpacity = (key: string, opacity: number) => {
     setLayers(prev => ({
       ...prev,
       [key]: { ...prev[key as keyof typeof prev], opacity }
     }));
diff --git a/client/src/components/StencilEditor/StencilEditor.tsx b/client/src/components/StencilEditor/StencilEditor.tsx
index 08d0002581831b066b3e4f58e4d43da6a7f7024b..8739fb73bfd3cf97e46bddcc520ddca5c474205e 100644
--- a/client/src/components/StencilEditor/StencilEditor.tsx
+++ b/client/src/components/StencilEditor/StencilEditor.tsx
@@ -96,50 +97,52 @@ function useStencilCanvas() {
           rotation: prev.rotation + rotateData.deltaRotation,
           x: rotateData.centerX + x * cos - y * sin,
           y: rotateData.centerY + x * sin + y * cos
         };
       });
     }
   };
 
   const resetView = () => {
     setViewTransform({ x: 0, y: 0, scale: 1, rotation: 0 });
   };
 
   return {
     tool,
     setTool,
     brushSize,
     setBrushSize,
     eraserSize,
     setEraserSize,
     activeLayer,
     setActiveLayer,
     brushColor,
     setBrushColor,
     stencilHue,
     setStencilHue,
+    stencilSaturation,
+    setStencilSaturation,
     layers,
     toggleLayer,
     setOpacity,
     viewTransform,
     handleGesture,
     resetView
   };
 }
 
 interface StencilEditorProps {
   originalImage?: string;
   stencilImage?: string;
 }
 
 export default function StencilEditor({ originalImage, stencilImage }: StencilEditorProps) {
   const [location, setLocation] = useLocation();
   const stageRef = useRef<StageRef>(null);
   const [originalImg, setOriginalImg] = useState<HTMLImageElement | null>(null);
   const [stencilImg, setStencilImg] = useState<HTMLImageElement | null>(null);
   const [isDrawing, setIsDrawing] = useState<boolean>(false);
   const [drawingLines, setDrawingLines] = useState<DrawingLine[]>([]);
   const [stencilLines, setStencilLines] = useState<DrawingLine[]>([]);
   const drawingPointsRef = useRef<number[]>([]);
   const currentLineRef = useRef<DrawingLine | null>(null);
   const frameRef = useRef<number>(0);
diff --git a/client/src/components/StencilEditor/StencilEditor.tsx b/client/src/components/StencilEditor/StencilEditor.tsx
index 08d0002581831b066b3e4f58e4d43da6a7f7024b..8739fb73bfd3cf97e46bddcc520ddca5c474205e 100644
--- a/client/src/components/StencilEditor/StencilEditor.tsx
+++ b/client/src/components/StencilEditor/StencilEditor.tsx
@@ -159,50 +162,52 @@ export default function StencilEditor({ originalImage, stencilImage }: StencilEd
   const touchesRef = useRef<Touch[]>([]);
   const lastPinchDistanceRef = useRef<number>(0);
   const lastTouchCenterRef = useRef<TouchCenter>({ x: 0, y: 0 });
   const lastAngleRef = useRef<number>(0);
   const [stencilCanvas, setStencilCanvas] = useState<HTMLCanvasElement | null>(null);
   const [isErasingStencil, setIsErasingStencil] = useState<boolean>(false);
   const [filteredStencilImg, setFilteredStencilImg] = useState<HTMLImageElement | null>(null);
   const [canvasSize, setCanvasSize] = useState<NativeSize>({ 
     width: window.innerWidth, 
     height: window.innerHeight 
   });
 
   const {
     tool,
     setTool,
     brushSize,
     setBrushSize,
     eraserSize,
     setEraserSize,
     activeLayer,
     setActiveLayer,
     brushColor,
     setBrushColor,
     stencilHue,
     setStencilHue,
+    stencilSaturation,
+    setStencilSaturation,
     layers,
     toggleLayer,
     setOpacity,
     viewTransform,
     handleGesture,
     resetView
   } = useStencilCanvas();
 
   // Manejar redimensionamiento de ventana para hacer el canvas responsivo
   useEffect(() => {
     const handleResize = (): void => {
       setCanvasSize({ 
         width: window.innerWidth, 
         height: window.innerHeight 
       });
     };
     
     window.addEventListener('resize', handleResize);
     window.addEventListener('orientationchange', handleResize);
     
     return () => {
       window.removeEventListener('resize', handleResize);
       window.removeEventListener('orientationchange', handleResize);
     };
   }, []);
diff --git a/client/src/components/StencilEditor/StencilEditor.tsx b/client/src/components/StencilEditor/StencilEditor.tsx
index 08d0002581831b066b3e4f58e4d43da6a7f7024b..8739fb73bfd3cf97e46bddcc520ddca5c474205e 100644
--- a/client/src/components/StencilEditor/StencilEditor.tsx
+++ b/client/src/components/StencilEditor/StencilEditor.tsx
@@ -210,98 +215,102 @@ export default function StencilEditor({ originalImage, stencilImage }: StencilEd
   // Cargar imágenes en resolución nativa
   useEffect(() => {
     if (stencilImage) {
       const img = new window.Image();
       img.crossOrigin = 'anonymous';
       img.onload = () => {
         setStencilImg(img);
         setNativeSize({ width: img.width, height: img.height });
       };
       img.src = stencilImage;
     }
   }, [stencilImage]);
 
   useEffect(() => {
     if (originalImage) {
       const img = new window.Image();
       img.crossOrigin = 'anonymous';
       img.onload = () => setOriginalImg(img);
       img.src = originalImage;
     }
   }, [originalImage]);
 
   // Aplicar filtro de tono al stencil
   useEffect(() => {
     if (stencilImg) {
+      if (stencilHue === 0 && stencilSaturation === 100) {
+        setFilteredStencilImg(null);
+        return;
+      }
+
       const canvas = document.createElement('canvas');
       const ctx = canvas.getContext('2d');
-      
+
       if (ctx) {
         canvas.width = stencilImg.width;
         canvas.height = stencilImg.height;
-        
+
         // Dibujar imagen original
         ctx.drawImage(stencilImg, 0, 0);
-        
-        if (stencilHue !== 0) {
-          // Obtener datos de píxeles
-          const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
-          const data = imageData.data;
-          
-          // Aplicar transformación de tono
-          for (let i = 0; i < data.length; i += 4) {
-            const r = data[i];
-            const g = data[i + 1];
-            const b = data[i + 2];
-            
-            // Convertir RGB a HSL
-            const [h, s, l] = rgbToHsl(r, g, b);
-            
-            // Aplicar cambio de tono
-            const newH = (h + stencilHue / 360) % 1;
-            
-            // Convertir de vuelta a RGB
-            const [newR, newG, newB] = hslToRgb(newH, s, l);
-            
-            data[i] = newR;
-            data[i + 1] = newG;
-            data[i + 2] = newB;
-          }
-          
-          // Aplicar datos modificados
-          ctx.putImageData(imageData, 0, 0);
+
+        // Obtener datos de píxeles
+        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
+        const data = imageData.data;
+
+        // Aplicar transformación de tono y saturación
+        for (let i = 0; i < data.length; i += 4) {
+          const r = data[i];
+          const g = data[i + 1];
+          const b = data[i + 2];
+
+          // Convertir RGB a HSL
+          const [h, s, l] = rgbToHsl(r, g, b);
+
+          // Aplicar cambios
+          const newH = (h + stencilHue / 360) % 1;
+          const newS = s * (stencilSaturation / 100);
+
+          // Convertir de vuelta a RGB
+          const [newR, newG, newB] = hslToRgb(newH, newS, l);
+
+          data[i] = newR;
+          data[i + 1] = newG;
+          data[i + 2] = newB;
         }
-        
+
+        // Aplicar datos modificados
+        ctx.putImageData(imageData, 0, 0);
+
         // Crear nueva imagen
         const newImg = new Image();
         newImg.onload = () => {
           setFilteredStencilImg(newImg);
         };
         newImg.src = canvas.toDataURL();
       }
     }
-  }, [stencilImg, stencilHue]);
+  }, [stencilImg, stencilHue, stencilSaturation]);
 
   // Manejo de gestos táctiles y mouse
   const handleMouseDown = (e: KonvaMouseEvent | KonvaTouchEvent) => {
     const stage = stageRef.current;
     if (!stage) return;
     const pos = stage.getPointerPosition();
     if (!pos) return;
     
     const mouseEvent = e.evt as MouseEvent;
     if (tool === 'move' || mouseEvent.button === 1 || mouseEvent.button === 2) { // Move tool, middle click or right click for panning
       e.evt.preventDefault();
       setIsPanning(true);
       setLastPointerPosition(pos);
       return;
     }
 
     if (tool === 'brush' || tool === 'eraser') {
       // Ignorar gestos de dibujo/borrado si el pointerType es 'touch'
       const pointerEvent = e.evt as any;
       if (pointerEvent.pointerType === 'touch') {
         return;
       }
       setIsDrawing(true);
       const transform = stage.getAbsoluteTransform().copy().invert();
       const { x, y } = transform.point(pos);
diff --git a/client/src/components/StencilEditor/StencilEditor.tsx b/client/src/components/StencilEditor/StencilEditor.tsx
index 08d0002581831b066b3e4f58e4d43da6a7f7024b..8739fb73bfd3cf97e46bddcc520ddca5c474205e 100644
--- a/client/src/components/StencilEditor/StencilEditor.tsx
+++ b/client/src/components/StencilEditor/StencilEditor.tsx
@@ -406,51 +415,51 @@ export default function StencilEditor({ originalImage, stencilImage }: StencilEd
     if (currentLineRef.current) {
       const newLine = { ...currentLineRef.current, points: [...drawingPointsRef.current] };
       if (currentLineRef.current.layer === 'drawing') {
         setDrawingLines(prev => [...prev, newLine]);
       } else {
         setStencilLines(prev => [...prev, newLine]);
       }
     }
     cancelAnimationFrame(frameRef.current);
     drawingPointsRef.current = [];
     currentLineRef.current = null;
 
     // Finalizar borrado de stencil con restauración del contexto
     if (isErasingStencil && stencilCanvas) {
       // Restaurar contexto una sola vez al final
       const ctx = stencilCanvas.getContext('2d');
       if (ctx) {
         ctx.globalCompositeOperation = 'source-over'; // Restaurar modo normal
       }
       
       // Actualización diferida para no bloquear
       setTimeout(() => {
         const newImg = new Image();
         newImg.onload = () => {
           setStencilImg(newImg);
-          if (stencilHue !== 0) {
+          if (stencilHue !== 0 || stencilSaturation !== 100) {
             setFilteredStencilImg(null);
           }
         };
         newImg.src = stencilCanvas.toDataURL();
       }, 0);
       setIsErasingStencil(false);
     }
     
     if (tool === 'eraser' && stageRef.current) {
       setTimeout(() => {
         if (stageRef.current) {
           const layers = stageRef.current.find('Layer');
           layers.forEach((layer: any) => {
             try {
               const hitCanvas = layer.getHitCanvas();
               if (hitCanvas) {
                 const hitContext = hitCanvas.getContext('2d');
                 hitContext.clearRect(0, 0, nativeSize.width, nativeSize.height);
                 layer.clearHitCache();
               }
             } catch (e) {
               console.log('Error limpiando hit canvas:', e);
             }
             layer.batchDraw();
           });
diff --git a/client/src/components/StencilEditor/StencilEditor.tsx b/client/src/components/StencilEditor/StencilEditor.tsx
index 08d0002581831b066b3e4f58e4d43da6a7f7024b..8739fb73bfd3cf97e46bddcc520ddca5c474205e 100644
--- a/client/src/components/StencilEditor/StencilEditor.tsx
+++ b/client/src/components/StencilEditor/StencilEditor.tsx
@@ -629,30 +638,32 @@ export default function StencilEditor({ originalImage, stencilImage }: StencilEd
         <Toolbar
           tool={tool}
           setTool={setTool}
           activeLayer={activeLayer}
           setActiveLayer={setActiveLayer}
           brushColor={brushColor}
           setBrushColor={setBrushColor}
           layers={layers}
           setOpacity={setOpacity}
           viewTransform={viewTransform}
           isLayersOpen={isLayersOpen}
           setIsLayersOpen={setIsLayersOpen}
           onBack={() => setLocation('/')}
         />
       </div>
 
       <LayerPanel
         isOpen={isLayersOpen}
         layers={layers}
         toggleLayer={toggleLayer}
         setOpacity={setOpacity}
         brushColor={brushColor}
         setBrushColor={setBrushColor}
         stencilHue={stencilHue}
         setStencilHue={setStencilHue}
+        stencilSaturation={stencilSaturation}
+        setStencilSaturation={setStencilSaturation}
         onClose={() => setIsLayersOpen(false)}
       />
     </div>
   );
-}
+}
